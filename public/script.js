document.getElementById('run_OpenAPI').addEventListener('click', async (event) => {
    event.preventDefault();
    document.getElementById('run_OpenAPI').disabled = true;
    document.getElementById('run_GROQAPI').disabled = true;
    document.getElementById('loadingOverlay').style.display = 'flex';
   
    const input ="Vi·∫øt test case c·ªßa rule :" + document.getElementById('userInput').value + "Theo c√∫ ph√°p:Title: t√™n test case,K·∫øt qu·∫£ mong mu·ªën: k·∫øt qu·∫£ khi th·ª±c hi·ªán testcase";
   
    try {
      const response = await fetch('/askOPENAPI', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: input })
      });
   
      const data = await response.json();
      document.getElementById('output').textContent = data.reply || 'Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI';
    } catch (error) {
      showError('L·ªói khi g·ªçi server backend.' + error);
    }
    // Enable l·∫°i button v√† ·∫©n loading spinner sau khi x·ª≠ l√Ω xong
    document.getElementById('run_OpenAPI').disabled = false;
    document.getElementById('run_GROQAPI').disabled = false;
    document.getElementById('loadingOverlay').style.display = 'none';  // ·∫®n loading
    document.getElementById('userInput').value = '';
  });
   
  document.getElementById('run_GROQAPI').addEventListener('click', async (event) => {
    event.preventDefault();
    document.getElementById('run_OpenAPI').disabled = true;
    document.getElementById('run_GROQAPI').disabled = true;
    document.getElementById('loadingOverlay').style.display = 'flex';
   
    const userInput = document.getElementById('userInput').value;
    showUserMessage(userInput);
   
  //"Vi·∫øt to√†n b·ªô test case c·ªßa rule: " +
    const data = document.getElementById('userInput').value.toUpperCase();
    let Keys = ["gen testcase","gen test case",
      "generate testcase", "generate test case",
      "create testcase", "create test case",
      "t·∫°o testcase", "t·∫°o test case",
      "t·∫°o testcase", "t·∫°o test case"
    ]
    const result = Keys.some(key => data.includes(key.toUpperCase()));
   
    let input = result
      ? data + " .V√† theo ƒë·ªãnh d·∫°ng JSON v·ªõi model nh∆∞ sau: Key=Title; value=t√™n test case, Key=DataTest; value=data ƒë·∫ßu v√†o c·ªßa testcase, Key=K·∫øt qu·∫£ mong mu·ªën; value=k·∫øt qu·∫£ khi th·ª±c hi·ªán testcase"
      : data;
   
    try {
      const response = await fetch('/askGROQAPI', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: input })
      });
   
      const data = await response.json();
      const content = data.reply || 'Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI';
      console.log("üëâ content:",content)
      if(result){
      displayTestCases(content);}  
      else{
        const responseBox   = document.getElementById('responseDisplay');
        const botMsg = document.createElement('div');
        botMsg.className = 'message bot-message';
        botMsg.innerHTML = content;
      responseBox.appendChild(botMsg);
      responseBox.scrollTop = responseBox.scrollHeight;
    }
 
  } catch (error) {
    showError('L·ªói khi g·ªçi server backend.'+ error);
  }
    // Enable l·∫°i button v√† ·∫©n loading spinner sau khi x·ª≠ l√Ω xong
  document.getElementById('run_OpenAPI').disabled = false;
  document.getElementById('run_GROQAPI').disabled = false;
  document.getElementById('loadingOverlay').style.display = 'none';  // ·∫®n loading
  document.getElementById('userInput').value = '';
});
 
function displayTestCases(content) {
  const responseBox   = document.getElementById('responseDisplay');
  const jsonContent =  content.match(/\[\s*{[\s\S]*?}\s*\]/);
 
  console.log("üëâ jsonContent:",jsonContent)
  let testCases = [];
 
  try {
    // N·∫øu truy·ªÅn v√†o l√† chu·ªói th√¨ parse, n·∫øu ƒë√£ l√† object th√¨ d√πng lu√¥n
    if (Array.isArray(jsonContent) && typeof jsonContent[0] === 'string') {
      testCases = JSON.parse(jsonContent[0]); // parse ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
    } else if (typeof jsonContent === 'string') {
      testCases = JSON.parse(jsonContent); // n·∫øu l√† chu·ªói JSON
    } else {
      testCases = jsonContent; // n·∫øu ƒë√£ l√† object
    }  
    console.log("üëâ testCases:",testCases)
  } catch (err) {
    showError('‚ùå Kh√¥ng parse ƒë∆∞·ª£c JSON:'+ err);
    const responseBox   = document.getElementById('responseDisplay');
      const botMsg = document.createElement('div');
      botMsg.className = 'message bot-message';
      botMsg.innerHTML = content;
      responseBox.appendChild(botMsg);
      responseBox.scrollTop = responseBox.scrollHeight;
    return;
  }
  const botMsg = document.createElement('div');
  botMsg.className = 'message bot-message';
 
  let tableHTML = `
    <table id="resultTable" border="1" style="border-collapse: collapse; width: 100%; font-size: 14px;">
      <thead>
        <tr>
          <th>Stt</th>
          <th>N·ªôi dung ki·ªÉm th·ª≠</th>
          <th>K·∫øt qu·∫£ ki·ªÉm th·ª≠</th>
          <th>K·∫øt qu·∫£ (ƒê·∫°t/Kh√¥ng)</th>
        </tr>
      </thead>
      <tbody>
  `;
  try{
    testCases.forEach((testCase, index) => {
      const title = testCase["Title"] || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ";
      const dataTest = JSON.stringify(testCase["DataTest"] || {}); // stringify n·∫øu l√† object
      const expected = testCase["K·∫øt qu·∫£ mong mu·ªën"] || "Kh√¥ng x√°c ƒë·ªãnh";
 
      tableHTML += `
      <tr>
        <td>${index + 1}</td>
        <td><b>${title}</b><br>
          <small>Data test: ${dataTest}</small><br>
          <small>B∆∞·ªõc th·ª±c hi·ªán:</small>
        </td>
        <td>K·∫øt qu·∫£ mong mu·ªën: ${expected}<br>K·∫øt qu·∫£ th·ª±c t·∫ø:</td>
        <td></td>
      </tr>
      `;
    });
 
    tableHTML += `
      </tbody>
      <tfoot>
    <tr>
     <td colspan="4" style="text-align: right;">
      <button id="exportBtn" onclick="exportToWord()">Export to Word</button>
     </td>
    </tr>
   </tfoot>
  </table>
  `;

  botMsg.innerHTML = tableHTML;
  responseBox.appendChild(botMsg);
  responseBox.scrollTop = responseBox.scrollHeight;
 }catch (err) {
  showError('‚ùå Kh√¥ng hi·ªÉn th·ªã ƒë∆∞·ª£c k·∫øt qu·∫£:'+ err);
  return;
 }
}


function exportToWord(filename = 'TestCases.doc') {
 const header = `
  <html xmlns:o='urn:schemas-microsoft-com:office:office'
     xmlns:w='urn:schemas-microsoft-com:office:word'
     xmlns='http://www.w3.org/TR/REC-html40'>
  <head>
   <meta charset='utf-8'>
   <title>Export HTML To Word</title>
   <style>
    table, th, td {
     border: 1px solid black;
     border-collapse: collapse;
    }
    th, td {
     padding: 8px;
     text-align: left;
    }
    table {
     width: 100%;
    }
   </style>
  </head><body>`;
 const footer = `</body></html>`;
 // Clone b·∫£ng ƒë·ªÉ thao t√°c m√† kh√¥ng ·∫£nh h∆∞·ªüng b·∫£ng g·ªëc
 const table = document.getElementById('resultTable').cloneNode(true);
 // X√≥a ph·∫ßn tfoot
 const tfoot = table.querySelector('tfoot');
 if (tfoot) {
  tfoot.remove();
}
 const tableHTML = table.outerHTML;

 const sourceHTML = header + tableHTML + footer;

 const sourceBlob = new Blob(['\ufeff', sourceHTML], {
  type: 'application/msword'
 });

 const url = URL.createObjectURL(sourceBlob);
 const downloadLink = document.createElement("a");

 downloadLink.href = url;
 downloadLink.download = filename;

 document.body.appendChild(downloadLink);
 downloadLink.click();
 document.body.removeChild(downloadLink);
}


function showError(message) {
 const errorDiv = document.getElementById('errorMessage');
 errorDiv.textContent = message;
 errorDiv.style.display = 'block';

 setTimeout(() => {
  errorDiv.style.display = 'none';
 }, 5000); // T·ª± ·∫©n sau 5 gi√¢y
}


function showUserMessage(text) {
 const responseBox = document.getElementById('responseDisplay');
 const msg = document.createElement('div');
 msg.className = 'message user-message';
 msg.textContent = text;
 responseBox.appendChild(msg);
 responseBox.scrollTop = responseBox.scrollHeight;
}